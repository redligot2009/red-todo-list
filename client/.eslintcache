[{"C:\\Users\\RED\\Documents\\GitHub\\red-todo-list\\client\\src\\index.js":"1","C:\\Users\\RED\\Documents\\GitHub\\red-todo-list\\client\\src\\App.js":"2","C:\\Users\\RED\\Documents\\GitHub\\red-todo-list\\client\\src\\reportWebVitals.js":"3","C:\\Users\\RED\\Documents\\GitHub\\red-todo-list\\client\\src\\components\\TodoItem.js":"4","C:\\Users\\RED\\Documents\\GitHub\\red-todo-list\\client\\src\\components\\ModalDialogBox.js":"5","C:\\Users\\RED\\Documents\\GitHub\\red-todo-list\\client\\src\\components\\modals\\EditItem.js":"6","C:\\Users\\RED\\Documents\\GitHub\\red-todo-list\\client\\src\\components\\modals\\EditListSettings.js":"7","C:\\Users\\RED\\Documents\\GitHub\\red-todo-list\\client\\src\\components\\modals\\AddItem.js":"8","C:\\Users\\RED\\Documents\\GitHub\\red-todo-list\\client\\src\\services\\items.service.js":"9","C:\\Users\\RED\\Documents\\GitHub\\red-todo-list\\client\\src\\http-common.js":"10","C:\\Users\\RED\\Documents\\GitHub\\red-todo-list\\client\\src\\services\\listSettings.service.js":"11"},{"size":653,"mtime":1610899827923,"results":"12","hashOfConfig":"13"},{"size":5936,"mtime":1611055615027,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"15","hashOfConfig":"13"},{"size":4294,"mtime":1611056059283,"results":"16","hashOfConfig":"13"},{"size":2602,"mtime":1611032317596,"results":"17","hashOfConfig":"13"},{"size":2748,"mtime":1611047444580,"results":"18","hashOfConfig":"13"},{"size":3823,"mtime":1611049918594,"results":"19","hashOfConfig":"13"},{"size":2819,"mtime":1611032186290,"results":"20","hashOfConfig":"13"},{"size":448,"mtime":1610959798934,"results":"21","hashOfConfig":"13"},{"size":179,"mtime":1610922831534,"results":"22","hashOfConfig":"13"},{"size":479,"mtime":1611043582013,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"14f0j7j",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"C:\\Users\\RED\\Documents\\GitHub\\red-todo-list\\client\\src\\index.js",[],["50","51"],"C:\\Users\\RED\\Documents\\GitHub\\red-todo-list\\client\\src\\App.js",[],"C:\\Users\\RED\\Documents\\GitHub\\red-todo-list\\client\\src\\reportWebVitals.js",[],"C:\\Users\\RED\\Documents\\GitHub\\red-todo-list\\client\\src\\components\\TodoItem.js",[],"C:\\Users\\RED\\Documents\\GitHub\\red-todo-list\\client\\src\\components\\ModalDialogBox.js",[],"C:\\Users\\RED\\Documents\\GitHub\\red-todo-list\\client\\src\\components\\modals\\EditItem.js",["52","53"],"import { Modal, Button, Form } from \"react-bootstrap\";\r\nimport React, { Component } from \"react\";\r\nimport ModalDialogBox from '../ModalDialogBox';\r\n\r\n// Import services\r\nimport ItemDataService from '../../services/items.service';\r\n\r\nexport default class EditItem extends ModalDialogBox\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props,\"edit-item\");\r\n        this.state = {\r\n            id: props.id,\r\n            itemTitle: props.itemTitle,\r\n            itemDescription: props.itemDescription\r\n        };\r\n    }\r\n    \r\n    async saveChanges ()\r\n    {\r\n        super.saveChanges();\r\n        let data ={\r\n            itemTitle: this.state.itemTitle,\r\n            itemDescription: this.state.itemDescription\r\n        };\r\n        // Update item fields\r\n        await ItemDataService.update(this.state.id, data)\r\n            .then(res=>{\r\n                console.log(\"Item updated successfully! \" + res.data);\r\n            })\r\n            .catch(e=>{\r\n                console.log(e);\r\n            });\r\n        this.props.onEdit();\r\n    }\r\n\r\n    // RENDER COMPONENT\r\n    renderHeader()\r\n    {\r\n        return (\r\n            <>\r\n                <Modal.Title>\r\n                    Edit Item\r\n                </Modal.Title>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderBody()\r\n    {\r\n        return (\r\n            <>\r\n                <Form>\r\n                    <Form.Group id=\"listTitle\">\r\n                        <Form.Label>\r\n                            Item Title\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                            id=\"item-title\"\r\n                            as=\"input\"\r\n                            maxLength=\"50\"\r\n                            value={this.state.itemTitle}\r\n                            placeholder=\"Enter item title here.\"\r\n                            onChange={e => this.setState({ itemTitle: e.target.value })}\r\n                        />\r\n                    </Form.Group>\r\n                    \r\n                    <Form.Group id=\"listDescription\">\r\n                        <Form.Label>\r\n                            Item Description\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                            id=\"item-description\"\r\n                            as=\"textarea\"\r\n                            rows=\"3\"\r\n                            maxLength=\"150\"\r\n                            value={this.state.itemDescription}\r\n                            placeholder=\"Enter item description here.\"\r\n                            onChange={e => this.setState({ itemDescription: e.target.value })}\r\n                        />\r\n                    </Form.Group>\r\n                    \r\n                </Form>\r\n            </>\r\n        )\r\n    }\r\n}","C:\\Users\\RED\\Documents\\GitHub\\red-todo-list\\client\\src\\components\\modals\\EditListSettings.js",["54","55"],"import { Modal, Button, Form } from \"react-bootstrap\";\r\nimport React, { Component } from \"react\";\r\nimport ModalDialogBox from '../ModalDialogBox';\r\n\r\n// Import services\r\nimport ListSettingsDataService from '../../services/listSettings.service';\r\n\r\nexport default class EditListSettings extends ModalDialogBox \r\n{\r\n    constructor(props)\r\n    {\r\n        super(props, \"edit-list-settings\");\r\n        this.state = {\r\n            listTitle: props.listTitle,\r\n            listDescription: props.listDescription,\r\n            setInitialState: false\r\n        };\r\n        this.countCharacters = this.countCharacters.bind(this);\r\n        this.handleTitleChange = this.handleTitleChange.bind(this);\r\n        this.handleDescriptionChange = this.handleDescriptionChange.bind(this);\r\n    }\r\n\r\n    async saveChanges()\r\n    {\r\n        super.saveChanges();\r\n        let data = {\r\n            listTitle: this.state.listTitle,\r\n            listDescription: this.state.listDescription\r\n        };\r\n        await ListSettingsDataService.update(data)\r\n            .then(res=>{\r\n                console.log(\"List Settings updated successfully!\");\r\n            })\r\n            .catch(e=>{\r\n                console.log(e);\r\n            });\r\n        this.props.onEdit();\r\n    }\r\n\r\n    countCharacters (event) \r\n    {\r\n        const charCount = event.target.value.length;\r\n        this.setState({[event.target.id + '_length']: charCount})\r\n    }\r\n\r\n    handleTitleChange(event)\r\n    {\r\n        this.setState({listTitle: event.target.value});\r\n        this.countCharacters(event);\r\n    }\r\n\r\n    handleDescriptionChange(event)\r\n    {\r\n        this.setState({listDescription: event.target.value});\r\n        this.countCharacters(event);\r\n    }\r\n\r\n    renderHeader()\r\n    {\r\n        return (\r\n            <>\r\n                <Modal.Title>\r\n                    Edit List Settings\r\n                </Modal.Title>\r\n            </>\r\n        );\r\n    }\r\n\r\n    resetState()\r\n    {\r\n        super.resetState();\r\n        this.setState({\r\n            list_description_textarea_length: 0,\r\n            list_title_input_length: 0\r\n        });\r\n    }\r\n\r\n    renderBody()\r\n    {\r\n        let maxTitleLength = 50;\r\n        let maxDescriptionLength = 150;\r\n        return (\r\n            <Form>\r\n                <Form.Group>\r\n                    <Form.Label> \r\n                        List Title\r\n                    </Form.Label>\r\n                    <Form.Control \r\n                        id=\"list_title_input\"\r\n                        as=\"input\" \r\n                        maxLength={maxTitleLength}\r\n                        onChange={this.handleTitleChange}\r\n                        value={this.state.listTitle}\r\n                        placeholder=\"Enter list title here.\"\r\n                    />\r\n                    <Form.Text>\r\n                        ({this.state.list_title_input_length || this.state.listTitle.length} / {maxTitleLength})\r\n                    </Form.Text>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Label> \r\n                        List Description\r\n                    </Form.Label>\r\n                    <Form.Control \r\n                        id=\"list_description_textarea\"\r\n                        as=\"textarea\"\r\n                        rows=\"3\"\r\n                        maxLength={maxDescriptionLength}\r\n                        value={this.state.listDescription}\r\n                        onChange={this.handleDescriptionChange}\r\n                        placeholder=\"Enter list description here.\"\r\n                    />\r\n                    <Form.Text>\r\n                        ({this.state.list_description_textarea_length || this.state.listDescription.length} / {maxDescriptionLength})\r\n                    </Form.Text>\r\n                </Form.Group>\r\n            </Form>\r\n        );\r\n    }\r\n}","C:\\Users\\RED\\Documents\\GitHub\\red-todo-list\\client\\src\\components\\modals\\AddItem.js",["56","57","58","59"],"import { Modal, Button, Form } from \"react-bootstrap\";\r\nimport React, { Component } from \"react\";\r\nimport ModalDialogBox from '../ModalDialogBox';\r\n\r\n// Import services\r\nimport ItemDataService from '../../services/items.service';\r\n\r\nexport default class AddItem extends ModalDialogBox\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props, \"add-item\");\r\n        this.state={\r\n            itemTitle:'',\r\n            itemDescription:''\r\n        };\r\n    }\r\n\r\n    resetState ()\r\n    {\r\n        super.resetState();\r\n        this.setState({\r\n            itemTitle:'',\r\n            itemDescription:''\r\n        });\r\n    }\r\n    \r\n    async saveChanges()\r\n    {\r\n        if(this.state.itemTitle.length == 0 || this.state.itemDescription.length==0)\r\n        {\r\n            console.log(\"Item fields must not be empty!\");\r\n            return false;\r\n        }\r\n        super.saveChanges();\r\n        await ItemDataService.create(this.state)\r\n            .then(res=>{\r\n                console.log(\"Item added successfully! \" + res.data);\r\n            })\r\n            .catch(e=>{\r\n                console.log(e);\r\n            });\r\n        this.props.onAdd();\r\n        return true;\r\n    }\r\n\r\n    renderHeader()\r\n    {\r\n        return (\r\n            <>\r\n                <Modal.Title>\r\n                    Add List Item\r\n                </Modal.Title>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderBody()\r\n    {\r\n        return (\r\n            <>\r\n                <Form id=\"add-item-form\">\r\n                    <Form.Group >\r\n                        <Form.Label>\r\n                            Item Title\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                            id=\"item-title\"\r\n                            as=\"input\"\r\n                            maxLength=\"50\"\r\n                            placeholder=\"Enter item title here.\"\r\n                            value={this.state.itemTitle}\r\n                            onChange={e=>this.setState({itemTitle : e.target.value})}\r\n                        />\r\n                    </Form.Group>\r\n                    \r\n                    <Form.Group >\r\n                        <Form.Label>\r\n                            Item Description\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                            id=\"item-description\"\r\n                            as=\"textarea\"\r\n                            rows=\"3\"\r\n                            maxLength=\"150\"\r\n                            placeholder=\"Enter item description here.\"\r\n                            value={this.state.itemDescription}\r\n                            onChange={e=>this.setState({itemDescription : e.target.value})}\r\n                        />\r\n                    </Form.Group>\r\n                </Form>\r\n            </>\r\n        );\r\n    }\r\n}","C:\\Users\\RED\\Documents\\GitHub\\red-todo-list\\client\\src\\services\\items.service.js",[],"C:\\Users\\RED\\Documents\\GitHub\\red-todo-list\\client\\src\\http-common.js",[],"C:\\Users\\RED\\Documents\\GitHub\\red-todo-list\\client\\src\\services\\listSettings.service.js",[],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":1,"column":17,"nodeType":"66","messageId":"67","endLine":1,"endColumn":23},{"ruleId":"64","severity":1,"message":"68","line":2,"column":17,"nodeType":"66","messageId":"67","endLine":2,"endColumn":26},{"ruleId":"64","severity":1,"message":"65","line":1,"column":17,"nodeType":"66","messageId":"67","endLine":1,"endColumn":23},{"ruleId":"64","severity":1,"message":"68","line":2,"column":17,"nodeType":"66","messageId":"67","endLine":2,"endColumn":26},{"ruleId":"64","severity":1,"message":"65","line":1,"column":17,"nodeType":"66","messageId":"67","endLine":1,"endColumn":23},{"ruleId":"64","severity":1,"message":"68","line":2,"column":17,"nodeType":"66","messageId":"67","endLine":2,"endColumn":26},{"ruleId":"69","severity":1,"message":"70","line":30,"column":40,"nodeType":"71","messageId":"72","endLine":30,"endColumn":42},{"ruleId":"69","severity":1,"message":"70","line":30,"column":81,"nodeType":"71","messageId":"72","endLine":30,"endColumn":83},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'Component' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]