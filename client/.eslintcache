[{"C:\\Users\\RED\\Documents\\GitHub\\red-todo-list\\client\\src\\index.js":"1","C:\\Users\\RED\\Documents\\GitHub\\red-todo-list\\client\\src\\reportWebVitals.js":"2","C:\\Users\\RED\\Documents\\GitHub\\red-todo-list\\client\\src\\App.js":"3","C:\\Users\\RED\\Documents\\GitHub\\red-todo-list\\client\\src\\components\\TodoItem.js":"4","C:\\Users\\RED\\Documents\\GitHub\\red-todo-list\\client\\src\\components\\EditListSettings.js":"5","C:\\Users\\RED\\Documents\\GitHub\\red-todo-list\\client\\src\\components\\ModalDialogBox.js":"6","C:\\Users\\RED\\Documents\\GitHub\\red-todo-list\\client\\src\\components\\EditItem.js":"7"},{"size":611,"mtime":1610575160244,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"9"},{"size":2610,"mtime":1610778713523,"results":"11","hashOfConfig":"9"},{"size":2789,"mtime":1610765822553,"results":"12","hashOfConfig":"9"},{"size":2484,"mtime":1610766173861,"results":"13","hashOfConfig":"9"},{"size":2665,"mtime":1610755624957,"results":"14","hashOfConfig":"9"},{"size":1682,"mtime":1610765856827,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"14f0j7j",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"18"},"C:\\Users\\RED\\Documents\\GitHub\\red-todo-list\\client\\src\\index.js",[],["35","36"],"C:\\Users\\RED\\Documents\\GitHub\\red-todo-list\\client\\src\\reportWebVitals.js",[],"C:\\Users\\RED\\Documents\\GitHub\\red-todo-list\\client\\src\\App.js",[],"C:\\Users\\RED\\Documents\\GitHub\\red-todo-list\\client\\src\\components\\TodoItem.js",[],"C:\\Users\\RED\\Documents\\GitHub\\red-todo-list\\client\\src\\components\\EditListSettings.js",["37","38"],"\r\nimport { Modal, Button, Form } from \"react-bootstrap\";\r\nimport React, { Component } from \"react\";\r\nimport ModalDialogBox from './ModalDialogBox';\r\n\r\nexport default class EditListSettings extends ModalDialogBox \r\n{\r\n    constructor(props)\r\n    {\r\n        super(props, \"edit-list-settings\");\r\n    }\r\n\r\n    countCharacters = (event) => {\r\n        const charCount = event.target.value.length;\r\n        this.setState({[event.target.id + '_length']: charCount})\r\n    }\r\n\r\n    renderHeader()\r\n    {\r\n        return (\r\n            <>\r\n                <Modal.Title>\r\n                    Edit List Settings\r\n                </Modal.Title>\r\n            </>\r\n        );\r\n    }\r\n\r\n    resetState()\r\n    {\r\n        super.resetState();\r\n        this.setState({\r\n            list_description_textarea_length: 0,\r\n            list_title_input_length: 0\r\n        });\r\n    }\r\n\r\n    renderBody()\r\n    {\r\n        let maxTitleLength = 50;\r\n        let maxDescriptionLength = 150;\r\n        return (\r\n            <Form>\r\n                <Form.Group>\r\n                    <Form.Label> \r\n                        List Title\r\n                    </Form.Label>\r\n                    <Form.Control \r\n                        id=\"list_title_input\"\r\n                        as=\"input\" \r\n                        maxlength={maxTitleLength}\r\n                        onChange={this.countCharacters}\r\n                        defaultValue={this.props.listSettings.title}\r\n                    />\r\n                    <Form.Text>\r\n                        ({this.state.list_title_input_length || this.props.listSettings.title.length} / {maxTitleLength})\r\n                    </Form.Text>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Label> \r\n                        List Description\r\n                    </Form.Label>\r\n                    <Form.Control \r\n                        id=\"list_description_textarea\"\r\n                        as=\"textarea\"\r\n                        rows=\"3\"\r\n                        maxLength={maxDescriptionLength}\r\n                        defaultValue={this.props.listSettings.description}\r\n                        onChange={this.countCharacters}\r\n                    />\r\n                    <Form.Text>\r\n                        ({this.state.list_description_textarea_length || this.props.listSettings.description.length} / {maxDescriptionLength})\r\n                    </Form.Text>\r\n                </Form.Group>\r\n            </Form>\r\n        );\r\n    }\r\n}","C:\\Users\\RED\\Documents\\GitHub\\red-todo-list\\client\\src\\components\\ModalDialogBox.js",["39"],"\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport React, { Component } from \"react\";\r\n\r\nclass ModalDialogBox extends Component \r\n{\r\n    constructor(props, dialogBoxName)\r\n    {\r\n        super(props);\r\n        this.state = {show: false || props.openModal, modalName: dialogBoxName};\r\n    }\r\n\r\n    openModal = () =>\r\n    {\r\n        this.setState({show:true});\r\n    }\r\n\r\n    resetState()\r\n    {\r\n        this.setState({show:false});\r\n    }\r\n    \r\n    closeModal = () =>\r\n    {\r\n        this.resetState();\r\n        this.props.onHide();\r\n    }\r\n\r\n    saveChanges = (data) =>\r\n    {\r\n        this.closeModal();\r\n    }\r\n\r\n    componentDidUpdate(prevProps)\r\n    {\r\n        const {show, modalName} = this.props;\r\n        if(prevProps.show !== show && prevProps.modalName === this.modalName)\r\n        {\r\n            if(show===true)\r\n            {\r\n                this.openModal();\r\n            }\r\n            else\r\n            {\r\n                this.closeModal();\r\n            }\r\n        }\r\n    }\r\n\r\n    renderHeader()\r\n    {\r\n        return (\r\n            <Modal.Title>\r\n                Insert Title Here\r\n            </Modal.Title>\r\n        );\r\n    }\r\n\r\n    renderBody()\r\n    {\r\n        return (\r\n            <form>\r\n                <div class=\"form-group\">\r\n                    <label> List Title </label>\r\n                    <input type=\"text\" class=\"form-control\"></input>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label> List Description </label>\r\n                    <textarea class=\"form-control\" rows=\"2\"></textarea>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    renderFooter()\r\n    {\r\n        return (\r\n            <>\r\n            <Button variant=\"outline-primary\"\r\n                onClick={this.saveChanges}>\r\n                    Save Changes\r\n            </Button>\r\n            <Button \r\n                    variant=\"outline-secondary\" \r\n                    onClick={this.closeModal}\r\n                >\r\n                    Cancel\r\n            </Button>\r\n            </>\r\n        );\r\n        \r\n    }\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <Modal\r\n                show={this.state.show}\r\n                onHide={this.closeModal} \r\n                centered\r\n            >\r\n                <Modal.Header>\r\n                    {this.renderHeader()}\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    {this.renderBody()}\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    {this.renderFooter()}\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ModalDialogBox;",["40","41"],"C:\\Users\\RED\\Documents\\GitHub\\red-todo-list\\client\\src\\components\\EditItem.js",["42","43"],"import { Modal, Button, Form } from \"react-bootstrap\";\r\nimport React, { Component } from \"react\";\r\nimport ModalDialogBox from './ModalDialogBox';\r\n\r\nexport default class EditItem extends ModalDialogBox\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props,\"edit-item\");\r\n    }\r\n    \r\n    renderHeader()\r\n    {\r\n        return (\r\n            <>\r\n                <Modal.Title>\r\n                    Edit Item\r\n                </Modal.Title>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderBody()\r\n    {\r\n        return (\r\n            <>\r\n                <Form>\r\n                    <Form.Group controlId=\"listTitle\">\r\n                        <Form.Label>\r\n                            List Title\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                            id=\"item-title\"\r\n                            as=\"input\"\r\n                            maxlength=\"50\"\r\n                            defaultValue={this.props.itemTitle || ''}\r\n                        />\r\n                    </Form.Group>\r\n                    \r\n                    <Form.Group controlId=\"listDescription\">\r\n                        <Form.Label>\r\n                            List Description\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                            id=\"item-description\"\r\n                            as=\"textarea\"\r\n                            rows=\"3\"\r\n                            maxlength=\"150\"\r\n                            defaultValue={this.props.itemDescription || ''}\r\n                        />\r\n                    </Form.Group>\r\n                    \r\n                </Form>\r\n            </>\r\n        )\r\n    }\r\n}",{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":2,"column":17,"nodeType":"50","messageId":"51","endLine":2,"endColumn":23},{"ruleId":"48","severity":1,"message":"52","line":3,"column":17,"nodeType":"50","messageId":"51","endLine":3,"endColumn":26},{"ruleId":"48","severity":1,"message":"53","line":36,"column":22,"nodeType":"50","messageId":"51","endLine":36,"endColumn":31},{"ruleId":"44","replacedBy":"54"},{"ruleId":"46","replacedBy":"55"},{"ruleId":"48","severity":1,"message":"49","line":1,"column":17,"nodeType":"50","messageId":"51","endLine":1,"endColumn":23},{"ruleId":"48","severity":1,"message":"52","line":2,"column":17,"nodeType":"50","messageId":"51","endLine":2,"endColumn":26},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'Component' is defined but never used.","'modalName' is assigned a value but never used.",["56"],["57"],"no-global-assign","no-unsafe-negation"]