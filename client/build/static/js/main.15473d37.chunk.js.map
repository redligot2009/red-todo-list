{"version":3,"sources":["components/ModalDialogBox.js","http-common.js","services/items.service.js","components/modals/EditItem.js","components/TodoItem.js","services/listSettings.service.js","components/modals/EditListSettings.js","components/modals/AddItem.js","App.js","reportWebVitals.js","index.js"],"names":["ModalDialogBox","props","dialogBoxName","state","show","openModal","modalName","closeModal","bind","saveChanges","resetState","this","setState","onHide","prevProps","Modal","Title","Button","variant","onClick","centered","Header","renderHeader","Body","renderBody","Footer","renderFooter","Component","axios","create","baseURL","headers","data","http","post","JSON","stringify","get","id","put","delete","EditItem","itemTitle","itemDescription","ItemDataService","update","then","res","console","log","catch","e","onEdit","Form","Group","Label","Control","as","maxLength","value","placeholder","onChange","target","rows","TodoItem","openEditModal","checked","handleCheck","event","className","type","icon","faEdit","onDelete","faTrash","EditListSettings","listTitle","listSettings","listDescription","countCharacters","handleTitleChange","handleDescriptionChange","ListSettingsDataService","charCount","length","list_description_textarea_length","list_title_input_length","Text","AddItem","onAdd","App","listItemsContent","handleDeleteItem","itemId","items","listItems","filter","item","handleCloseModal","handleOpenModal","retrieveList","retrieveListSettings","forEach","response","getAll","openModalName","map","listItem","handleShowModal","style","maxWidth","renderListItems","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.15473d37.chunk.js","sourcesContent":["\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport React, { Component } from \"react\";\r\n\r\nclass ModalDialogBox extends Component \r\n{\r\n    constructor(props, dialogBoxName)\r\n    {\r\n        super(props);\r\n        this.state = {show: (false || props.openModal), modalName: dialogBoxName};\r\n        // Bind modal methods\r\n        this.closeModal = this.closeModal.bind(this);\r\n        this.openModal = this.openModal.bind(this);\r\n        this.saveChanges = this.saveChanges.bind(this);\r\n        this.resetState = this.resetState.bind(this);\r\n    }\r\n\r\n    openModal ()\r\n    {\r\n        this.setState({show:true});\r\n    }\r\n\r\n    resetState()\r\n    {\r\n        this.setState({show:false});\r\n    }\r\n    \r\n    closeModal ()\r\n    {\r\n        this.resetState();\r\n        this.props.onHide();\r\n    }\r\n\r\n    saveChanges ()\r\n    {\r\n        this.closeModal();\r\n    }\r\n\r\n    componentDidUpdate(prevProps)\r\n    {\r\n        const {show} = this.props;\r\n        if(prevProps.show !== show)\r\n        {\r\n            if(show===true)\r\n            {\r\n                this.openModal();\r\n            }\r\n            else\r\n            {\r\n                this.closeModal();\r\n            }\r\n        }\r\n    }\r\n\r\n    renderHeader()\r\n    {\r\n        return (\r\n            <Modal.Title>\r\n                Insert Title Here\r\n            </Modal.Title>\r\n        );\r\n    }\r\n\r\n    renderBody()\r\n    {\r\n        return (\r\n            <>\r\n                <div>\r\n                    Test Body Here\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderFooter()\r\n    {\r\n        return (\r\n            <>\r\n                <Button \r\n                    variant=\"outline-primary\"\r\n                    onClick={this.saveChanges}\r\n                >\r\n                    Save Changes\r\n                </Button>\r\n                <Button \r\n                    variant=\"outline-secondary\" \r\n                    onClick={this.closeModal}\r\n                >\r\n                    Cancel\r\n                </Button>\r\n            </>\r\n        );\r\n        \r\n    }\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <Modal\r\n                show={this.state.show}\r\n                onHide={this.closeModal} \r\n                centered\r\n            >\r\n                <Modal.Header>\r\n                    {this.renderHeader()}\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    {this.renderBody()}\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    {this.renderFooter()}\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ModalDialogBox;","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL: \"http://192.168.86.165:3000/api\",\r\n    headers: {\r\n        \"Content-type\": \"application/json\"\r\n    }\r\n});","import http from '../http-common';\r\n\r\nclass ItemDataService\r\n{\r\n    create(data)\r\n    {\r\n        return http.post(\"/items/add\", JSON.stringify(data));\r\n    }\r\n\r\n    getAll()\r\n    {\r\n        return http.get(\"/items\");\r\n    }\r\n\r\n    update(id, data)\r\n    {\r\n        return http.put(`/items/${id}`, JSON.stringify(data));\r\n    }\r\n\r\n    delete(id)\r\n    {\r\n        return http.delete(`/items/${id}`);\r\n    }\r\n\r\n}\r\n\r\nexport default new ItemDataService();","import { Modal, Button, Form } from \"react-bootstrap\";\r\nimport React, { Component } from \"react\";\r\nimport ModalDialogBox from '../ModalDialogBox';\r\n\r\n// Import services\r\nimport ItemDataService from '../../services/items.service';\r\n\r\nexport default class EditItem extends ModalDialogBox\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props,\"edit-item\");\r\n        this.state = {\r\n            id: props.id,\r\n            itemTitle: props.itemTitle,\r\n            itemDescription: props.itemDescription\r\n        };\r\n    }\r\n    \r\n    async saveChanges ()\r\n    {\r\n        super.saveChanges();\r\n        let data ={\r\n            itemTitle: this.state.itemTitle,\r\n            itemDescription: this.state.itemDescription\r\n        };\r\n        // Update item fields\r\n        await ItemDataService.update(this.state.id, data)\r\n            .then(res=>{\r\n                console.log(\"Item updated successfully! \" + res.data);\r\n            })\r\n            .catch(e=>{\r\n                console.log(e);\r\n            });\r\n        this.props.onEdit();\r\n    }\r\n\r\n    // RENDER COMPONENT\r\n    renderHeader()\r\n    {\r\n        return (\r\n            <>\r\n                <Modal.Title>\r\n                    Edit Item\r\n                </Modal.Title>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderBody()\r\n    {\r\n        return (\r\n            <>\r\n                <Form>\r\n                    <Form.Group id=\"listTitle\">\r\n                        <Form.Label>\r\n                            Item Title\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                            id=\"item-title\"\r\n                            as=\"input\"\r\n                            maxLength=\"50\"\r\n                            value={this.state.itemTitle}\r\n                            placeholder=\"Enter item title here.\"\r\n                            onChange={e => this.setState({ itemTitle: e.target.value })}\r\n                        />\r\n                    </Form.Group>\r\n                    \r\n                    <Form.Group id=\"listDescription\">\r\n                        <Form.Label>\r\n                            Item Description\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                            id=\"item-description\"\r\n                            as=\"textarea\"\r\n                            rows=\"3\"\r\n                            maxLength=\"150\"\r\n                            value={this.state.itemDescription}\r\n                            placeholder=\"Enter item description here.\"\r\n                            onChange={e => this.setState({ itemDescription: e.target.value })}\r\n                        />\r\n                    </Form.Group>\r\n                    \r\n                </Form>\r\n            </>\r\n        )\r\n    }\r\n}","import { faEdit, faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, {Component} from 'react';\r\n\r\n// Import React components\r\nimport EditItem from './modals/EditItem';\r\nimport './TodoItem.scss';\r\n\r\n// Import Axios services\r\nimport ItemDataService from '../services/items.service';\r\n\r\nexport default class TodoItem extends Component \r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            id: props.id || 0,\r\n            openEditModal: false,\r\n            itemTitle: props.itemTitle || '',\r\n            itemDescription: props.itemDescription || '',\r\n            checked: props.checked || false\r\n        };\r\n        this.handleCheck = this.handleCheck.bind(this);\r\n    }\r\n\r\n    // Event Handlers\r\n    async handleCheck(event)\r\n    {\r\n        this.setState({checked : event.target.checked});\r\n        await ItemDataService.update(this.state.id,{checked: event.target.checked})\r\n            .then(res=>{\r\n                console.log(\"Item with id \" + this.state.id + \" checked / unchecked successfully!\");\r\n            })\r\n            .catch(e=>{\r\n                console.log(e);\r\n            });\r\n    }\r\n\r\n    // Render Component\r\n    render()\r\n    {\r\n        return (\r\n            <>\r\n                <EditItem \r\n                    show={this.state.openEditModal}\r\n                    id={this.state.id}\r\n                    itemTitle={this.state.itemTitle}\r\n                    itemDescription={this.state.itemDescription}\r\n                    onHide={() => {\r\n                        this.setState({\r\n                            openEditModal:false,\r\n                            modalName:'edit-item'\r\n                        });\r\n                    }}\r\n                    onEdit={this.props.onEdit}\r\n                />\r\n                <div className=\"row todo-item\">\r\n                    <div className=\"col-2 d-flex justify-content-center item-status\">\r\n                        <div className=\"custom-control custom-checkbox\">\r\n                            <input \r\n                                className=\"item-status-checkbox custom-control-input\" \r\n                                type=\"checkbox\" \r\n                                checked={this.state.checked} \r\n                                onChange={this.handleCheck}\r\n                            />\r\n                            <label className=\"custom-control-label\">\r\n                                <span className=\"text-hide\"> Invisible </span>\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-6 item-information\">\r\n                        <div className=\"row item-title\">\r\n                            {this.props.itemTitle || \"Test Title Here\"}\r\n                        </div>\r\n                        <div className=\"row item-details\">\r\n                            {this.props.itemDescription || \"Message here\"}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-4 item-operations d-flex justify-content-end\">\r\n                        <button \r\n                            type=\"button\" \r\n                            className=\"item-edit btn btn-outline-primary\"\r\n                            onClick={() => {\r\n                                this.setState({\r\n                                    openEditModal:true\r\n                                })\r\n                            }}\r\n                        >\r\n                            <FontAwesomeIcon icon={faEdit} />\r\n                        </button>\r\n                        <button \r\n                            type=\"button\" \r\n                            className=\"item-delete btn btn-outline-primary\"\r\n                            onClick={()=>this.props.onDelete(this.state.id)}\r\n                        >\r\n                            <FontAwesomeIcon icon={faTrash} />\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}","import http from '../http-common';\r\n\r\nclass ListSettingsDataService\r\n{\r\n    // create(data)\r\n    // {\r\n    //     return http.post(\"/settings/\", JSON.stringify(data));\r\n    // }\r\n\r\n    get()\r\n    {\r\n        return http.get(\"/settings/\");\r\n    }\r\n\r\n    update(data)\r\n    {\r\n        return http.put(\"/settings/\", JSON.stringify(data));\r\n    }\r\n\r\n    // delete()\r\n    // {\r\n    //     return http.delete(\"/settings/\");\r\n    // }\r\n\r\n}\r\n\r\nexport default new ListSettingsDataService();","import { Modal, Button, Form } from \"react-bootstrap\";\r\nimport React, { Component } from \"react\";\r\nimport ModalDialogBox from '../ModalDialogBox';\r\n\r\n// Import services\r\nimport ListSettingsDataService from '../../services/listSettings.service';\r\n\r\nexport default class EditListSettings extends ModalDialogBox \r\n{\r\n    constructor(props)\r\n    {\r\n        super(props, \"edit-list-settings\");\r\n        this.state = {\r\n            listTitle: props.listSettings.listTitle || '',\r\n            listDescription: props.listSettings.listDescription || ''\r\n        };\r\n        this.countCharacters = this.countCharacters.bind(this);\r\n        this.handleTitleChange = this.handleTitleChange.bind(this);\r\n        this.handleDescriptionChange = this.handleDescriptionChange.bind(this);\r\n    }\r\n\r\n    async saveChanges()\r\n    {\r\n        super.saveChanges();\r\n        let data = {\r\n            listTitle: this.state.listTitle,\r\n            listDescription: this.state.listDescription\r\n        };\r\n        await ListSettingsDataService.update(data)\r\n            .then(res=>{\r\n                console.log(\"List Settings updated successfully!\");\r\n            })\r\n            .catch(e=>{\r\n                console.log(e);\r\n            });\r\n        this.props.onEdit();\r\n    }\r\n\r\n    countCharacters (event) \r\n    {\r\n        const charCount = event.target.value.length;\r\n        this.setState({[event.target.id + '_length']: charCount})\r\n    }\r\n\r\n    handleTitleChange(event)\r\n    {\r\n        this.setState({listTitle: event.target.value});\r\n        this.countCharacters(event);\r\n    }\r\n\r\n    handleDescriptionChange(event)\r\n    {\r\n        this.setState({listDescription: event.target.value});\r\n        this.countCharacters(event);\r\n    }\r\n\r\n    renderHeader()\r\n    {\r\n        return (\r\n            <>\r\n                <Modal.Title>\r\n                    Edit List Settings\r\n                </Modal.Title>\r\n            </>\r\n        );\r\n    }\r\n\r\n    resetState()\r\n    {\r\n        super.resetState();\r\n        this.setState({\r\n            list_description_textarea_length: 0,\r\n            list_title_input_length: 0\r\n        });\r\n    }\r\n\r\n    renderBody()\r\n    {\r\n        let maxTitleLength = 50;\r\n        let maxDescriptionLength = 150;\r\n        return (\r\n            <Form>\r\n                <Form.Group>\r\n                    <Form.Label> \r\n                        List Title\r\n                    </Form.Label>\r\n                    <Form.Control \r\n                        id=\"list_title_input\"\r\n                        as=\"input\" \r\n                        maxLength={maxTitleLength}\r\n                        onChange={this.handleTitleChange}\r\n                        value={this.state.listTitle}\r\n                        placeholder=\"Enter list title here.\"\r\n                    />\r\n                    <Form.Text>\r\n                        ({this.state.list_title_input_length || this.state.listTitle.length} / {maxTitleLength})\r\n                    </Form.Text>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Label> \r\n                        List Description\r\n                    </Form.Label>\r\n                    <Form.Control \r\n                        id=\"list_description_textarea\"\r\n                        as=\"textarea\"\r\n                        rows=\"3\"\r\n                        maxLength={maxDescriptionLength}\r\n                        value={this.state.listDescription}\r\n                        onChange={this.handleDescriptionChange}\r\n                        placeholder=\"Enter list description here.\"\r\n                    />\r\n                    <Form.Text>\r\n                        ({this.state.list_description_textarea_length || this.state.listDescription.length} / {maxDescriptionLength})\r\n                    </Form.Text>\r\n                </Form.Group>\r\n            </Form>\r\n        );\r\n    }\r\n}","import { Modal, Button, Form } from \"react-bootstrap\";\r\nimport React, { Component } from \"react\";\r\nimport ModalDialogBox from '../ModalDialogBox';\r\n\r\n// Import services\r\nimport ItemDataService from '../../services/items.service';\r\n\r\nexport default class AddItem extends ModalDialogBox\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props, \"add-item\");\r\n        this.state={\r\n            itemTitle:'',\r\n            itemDescription:''\r\n        };\r\n    }\r\n\r\n    resetState ()\r\n    {\r\n        super.resetState();\r\n        this.setState({\r\n            itemTitle:'',\r\n            itemDescription:''\r\n        });\r\n    }\r\n    \r\n    async saveChanges()\r\n    {\r\n        if(this.state.itemTitle.length == 0 || this.state.itemDescription.length==0)\r\n        {\r\n            console.log(\"Item fields must not be empty!\");\r\n            return false;\r\n        }\r\n        super.saveChanges();\r\n        await ItemDataService.create(this.state)\r\n            .then(res=>{\r\n                console.log(\"Item added successfully! \" + res.data);\r\n            })\r\n            .catch(e=>{\r\n                console.log(e);\r\n            });\r\n        this.props.onAdd();\r\n        return true;\r\n    }\r\n\r\n    renderHeader()\r\n    {\r\n        return (\r\n            <>\r\n                <Modal.Title>\r\n                    Add List Item\r\n                </Modal.Title>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderBody()\r\n    {\r\n        return (\r\n            <>\r\n                <Form id=\"add-item-form\">\r\n                    <Form.Group >\r\n                        <Form.Label>\r\n                            Item Title\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                            id=\"item-title\"\r\n                            as=\"input\"\r\n                            maxLength=\"50\"\r\n                            placeholder=\"Enter item title here.\"\r\n                            value={this.state.itemTitle}\r\n                            onChange={e=>this.setState({itemTitle : e.target.value})}\r\n                        />\r\n                    </Form.Group>\r\n                    \r\n                    <Form.Group >\r\n                        <Form.Label>\r\n                            Item Description\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                            id=\"item-description\"\r\n                            as=\"textarea\"\r\n                            rows=\"3\"\r\n                            maxLength=\"150\"\r\n                            placeholder=\"Enter item description here.\"\r\n                            value={this.state.itemDescription}\r\n                            onChange={e=>this.setState({itemDescription : e.target.value})}\r\n                        />\r\n                    </Form.Group>\r\n                </Form>\r\n            </>\r\n        );\r\n    }\r\n}","// STYLES\nimport './App.scss';\n\n// LIBRARY IMPORTS\nimport {Button} from 'react-bootstrap';\nimport { Component } from 'react';\n\n// REGULAR COMPONENTS\nimport TodoItem from './components/TodoItem';\n\n//MODAL COMPONENTS\nimport EditListSettings from './components/modals/EditListSettings';\nimport AddItem from './components/modals/AddItem';\n\n// SERVICES\nimport ItemDataService from './services/items.service';\nimport ListSettingsDataService from './services/listSettings.service';\n\nexport default class App extends Component\n{\n\n  // TEST FUNCTIONS\n  listItemsContent = [\n    {\n      itemTitle: \"This is a Title\",\n      itemDescription: \"Hello!\",\n      checked: false\n    },\n    {\n      itemTitle: \"This is also a Title\",\n      itemDescription: \"How Are You?\",\n      checked: false\n    },\n    {\n      itemTitle: \"This is not a Title\",\n      itemDescription: \"How Well Are You?\",\n      checked: true\n    }\n  ];\n\n  populateList()\n  {\n    this.listItemsContent.forEach(\n      (item) =>\n      {\n        var data = {\n          itemTitle: item.itemTitle,\n          itemDescription: item.itemDescription,\n          checked: item.checked\n        };\n        ItemDataService.create(data)\n          .then (response=>{\n            console.log(response.data);\n          })\n          .catch (e=>{\n            console.log(e);\n          });\n      });\n  }\n\n  // CONSTRUCTOR + COMPONENT METHODS\n  constructor(props)\n  {\n    super(props);\n    this.state = {\n      openModal: false, \n      modalName: \"\",\n      listItems: [],\n      listSettings: {\n        listTitle: '',\n        listDescription: \"\"\n      }\n    };\n    this.handleCloseModal = this.handleCloseModal.bind(this);\n    this.handleOpenModal = this.handleOpenModal.bind(this);\n    this.retrieveList = this.retrieveList.bind(this);\n    this.retrieveListSettings = this.retrieveListSettings.bind(this);\n  }\n\n  componentDidMount()\n  {\n    // TEST CODE\n    //this.populateList();\n\n    // Get all items in list from database through backend REST API.\n    this.retrieveList();\n\n    // Get list settings from database through backend REST API.\n    this.retrieveListSettings();\n  }\n\n  // DATABASE EVENTS\n  async retrieveList ()\n  {\n    console.log(\"Refreshed list items.\");\n    await ItemDataService.getAll()\n      .then(response=>{\n        this.setState({\n          listItems: response.data\n        });\n      })\n      .catch(e=>{\n        console.log(e);\n      });\n  }\n\n  async retrieveListSettings()\n  {\n    console.log(\"Retrieved list settings.\");\n    await ListSettingsDataService.get()\n      .then(response=>{\n        this.setState({\n          listSettings: response.data\n        });\n      })\n      .catch(e=>{\n        console.log(e);\n      });\n  }\n\n  // HANDLE MODAL EVENTS\n  handleCloseModal()\n  {\n    this.setState(state => ({\n      openModal:false,\n      modalName:''\n    }));\n  }\n\n  handleOpenModal (openModalName)\n  {\n    this.setState(state => ({\n      openModal:true,\n      modalName: openModalName\n    }));\n  }\n\n  handleShowModal(modalName)\n  {\n    return (this.state.modalName===modalName ? this.state.openModal : 0);\n  }\n\n  // HANDLE LIST ITEM EVENTS\n  handleDeleteItem = (itemId) =>\n  {\n    console.log(\"Item with id \" + itemId + \" deleted!\");\n    // Delete item on the UI\n    const items = this.state.listItems.filter(item => item.id !== itemId);\n    this.setState({listItems: items});\n    // Delete item from database\n    ItemDataService.delete(itemId)\n      .catch((e)=>\n      {\n        console.log(e);\n      });\n  }\n\n  // RENDER LIST ITEMS\n  renderListItems()\n  {\n    const item = (\n      <>\n        {this.state.listItems.map(\n            listItem => (\n              <TodoItem \n                key={listItem.id}\n                id={listItem.id}\n                itemTitle={listItem.itemTitle}\n                itemDescription={listItem.itemDescription}\n                checked={listItem.checked}\n                onDelete={this.handleDeleteItem}\n                onEdit={this.retrieveList}\n              />\n        ))}\n      </>\n    );\n    return item;\n  }\n\n  // RENDER APP\n  render()\n  {\n    return (\n      <div className=\"container-fluid d-flex flex-column justify-content-center h-100 overflow-auto App\">\n        <EditListSettings \n          listSettings={this.state.listSettings}\n          show={this.handleShowModal(\"edit-list-settings\")} \n          onHide={this.handleCloseModal}\n          onEdit={this.retrieveListSettings}\n          //onEdit={}\n        />\n        <AddItem\n          show={this.handleShowModal(\"add-item\")}\n          onHide={this.handleCloseModal}\n          onAdd={this.retrieveList}\n        />\n        <div className=\"row d-flex flex-column align-items-center justify-content-center list-title\">\n          <div className=\"container-fluid\" style={{maxWidth:750}}>\n            <h1> {this.state.listSettings.listTitle} </h1>\n            <p> {this.state.listSettings.listDescription} </p>\n          </div>\n        </div>\n        <div className=\"row list-contents h-50\">\n          <div className=\"container-fluid justify-content-center h-100 overflow-auto\" style={{maxWidth:750}}>\n            { this.renderListItems() }\n          </div>\n        </div>\n        <div className=\"row justify-content-center list-operations\">\n            <Button \n              variant=\"outline-primary\"\n              onClick={()=>this.handleOpenModal(\"add-item\")}\n            >\n              Add New Item\n            </Button>\n            <Button \n              variant=\"outline-primary\"\n              onClick={() => this.handleOpenModal(\"edit-list-settings\")}\n            >\n              List Settings\n            </Button>\n        </div>\n      </div>\n    );\n  }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/js/bootstrap.js';\nimport 'react-bootstrap';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}