{"version":3,"sources":["components/ModalDialogBox.js","components/EditItem.js","components/TodoItem.js","components/EditListSettings.js","App.js","reportWebVitals.js","index.js"],"names":["ModalDialogBox","props","dialogBoxName","openModal","setState","show","closeModal","resetState","onHide","saveChanges","data","state","modalName","this","prevProps","Modal","Title","class","type","rows","Button","variant","onClick","centered","Header","renderHeader","Body","renderBody","Footer","renderFooter","Component","EditItem","Form","Group","controlId","Label","Control","id","as","maxlength","defaultValue","itemTitle","itemDescription","TodoItem","openEditModal","className","for","title","description","icon","faEdit","faTrash","EditListSettings","countCharacters","event","charCount","target","value","length","list_description_textarea_length","list_title_input_length","onChange","listSettings","Text","maxLength","App","listItems","fetch","then","res","json","map","listItem","style","maxWidth","renderListItems","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAmHeA,E,kDA7GX,WAAYC,EAAOC,GAClB,IAAD,8BACI,cAAMD,IAIVE,UAAY,WAER,EAAKC,SAAS,CAACC,MAAK,KAPxB,EAeAC,WAAa,WAET,EAAKC,aACL,EAAKN,MAAMO,UAlBf,EAqBAC,YAAc,SAACC,GAEX,EAAKJ,cArBL,EAAKK,MAAQ,CAACN,KAAeJ,EAAME,UAAWS,UAAWV,GAF7D,E,yDAYIW,KAAKT,SAAS,CAACC,MAAK,M,yCAcLS,GAClB,IAAD,EAC8BD,KAAKZ,MAAxBI,EADX,EACWA,KADX,EACiBO,UACVE,EAAUT,OAASA,GAAQS,EAAUF,YAAcC,KAAKD,aAE7C,IAAPP,EAECQ,KAAKV,YAILU,KAAKP,gB,qCAOb,OACI,cAACS,EAAA,EAAMC,MAAP,kC,mCAQJ,OACI,iCACI,sBAAKC,MAAM,aAAX,UACI,iDACA,uBAAOC,KAAK,OAAOD,MAAM,oBAE7B,sBAAKA,MAAM,aAAX,UACI,uDACA,0BAAUA,MAAM,eAAeE,KAAK,c,qCAQhD,OACI,qCACA,cAACC,EAAA,EAAD,CAAQC,QAAQ,kBACZC,QAAST,KAAKJ,YADlB,0BAIA,cAACW,EAAA,EAAD,CACQC,QAAQ,oBACRC,QAAST,KAAKP,WAFtB,yB,+BAaJ,OACI,eAACS,EAAA,EAAD,CACIV,KAAMQ,KAAKF,MAAMN,KACjBG,OAAQK,KAAKP,WACbiB,UAAQ,EAHZ,UAKI,cAACR,EAAA,EAAMS,OAAP,UACKX,KAAKY,iBAEV,cAACV,EAAA,EAAMW,KAAP,UACKb,KAAKc,eAEV,cAACZ,EAAA,EAAMa,OAAP,UACKf,KAAKgB,wB,GAxGGC,aCARC,E,kDAEjB,WAAY9B,GACX,uCACSA,EAAM,a,2DAKZ,OACI,mCACI,cAACc,EAAA,EAAMC,MAAP,4B,mCASR,OACI,mCACI,eAACgB,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,YAAtB,UACI,cAACF,EAAA,EAAKG,MAAN,yBAGA,cAACH,EAAA,EAAKI,QAAN,CACIC,GAAG,aACHC,GAAG,QACHC,UAAU,KACVC,aAAc3B,KAAKZ,MAAMwC,WAAa,QAI9C,eAACT,EAAA,EAAKC,MAAN,CAAYC,UAAU,kBAAtB,UACI,cAACF,EAAA,EAAKG,MAAN,+BAGA,cAACH,EAAA,EAAKI,QAAN,CACIC,GAAG,mBACHC,GAAG,WACHnB,KAAK,IACLoB,UAAU,MACVC,aAAc3B,KAAKZ,MAAMyC,iBAAmB,iB,GA5ClC1C,GCEjB2C,G,wDAEjB,WAAY1C,GACX,IAAD,8BACI,cAAMA,IACDU,MAAM,CACPiC,eAAe,EACfH,UAAU,GACVC,gBAAgB,IALxB,E,uDASWD,EAAUC,GAEjB7B,KAAKT,SAAS,CAACwC,eAAc,EAAKhC,UAAU,O,+BAI/C,IAAD,OACI,OACI,qCACI,cAAC,EAAD,CACIP,KAAMQ,KAAKF,MAAMiC,cACjBpC,OAAQ,WAEA,EAAKJ,SAAS,CAACwC,eAAc,EAAMhC,UAAU,eAGrD6B,UAAW5B,KAAKF,MAAM8B,UACtBC,gBAAiB7B,KAAKF,MAAM+B,kBAEhC,sBAAKG,UAAU,gBAAf,UACI,qBAAKA,UAAU,kDAAf,SACI,sBAAKA,UAAU,iCAAf,UACI,uBAAOA,UAAU,4CAA4C3B,KAAK,aAClE,uBAAOD,MAAM,uBAAuB6B,IAAI,eAAxC,SACI,sBAAM7B,MAAM,YAAZ,8BAIZ,sBAAK4B,UAAU,yBAAf,UACI,qBAAKA,UAAU,iBAAf,SACKhC,KAAKZ,MAAM8C,OAAS,oBAEzB,qBAAKF,UAAU,mBAAf,SACKhC,KAAKZ,MAAM+C,aAAe,oBAGnC,sBAAKH,UAAU,mDAAf,UACI,wBACI3B,KAAK,SACL2B,UAAU,oCACVvB,QAAS,WACL,EAAKlB,SAAS,CACVwC,eAAc,EACdH,UAAW,EAAKxC,MAAM8C,MACtBL,gBAAiB,EAAKzC,MAAM+C,eAPxC,SAWI,cAAC,IAAD,CAAiBC,KAAMC,QAE3B,wBAAQhC,KAAK,SAAS2B,UAAU,sCAAhC,SACI,cAAC,IAAD,CAAiBI,KAAME,qB,GA/DbrB,c,wBCDjBsB,E,kDAEjB,WAAYnD,GACX,IAAD,8BACI,cAAMA,EAAO,uBAGjBoD,gBAAkB,SAACC,GACf,IAAMC,EAAYD,EAAME,OAAOC,MAAMC,OACrC,EAAKtD,SAAL,eAAgBkD,EAAME,OAAOnB,GAAK,UAAYkB,KANlD,E,2DAWI,OACI,mCACI,cAACxC,EAAA,EAAMC,MAAP,qC,mCASR,mEACAH,KAAKT,SAAS,CACVuD,iCAAkC,EAClCC,wBAAyB,M,mCAQ7B,OACI,eAAC5B,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,MAAN,WACI,cAACD,EAAA,EAAKG,MAAN,yBAGA,cAACH,EAAA,EAAKI,QAAN,CACIC,GAAG,mBACHC,GAAG,QACHC,UAXK,GAYLsB,SAAUhD,KAAKwC,gBACfb,aAAc3B,KAAKZ,MAAM6D,aAAaf,QAE1C,eAACf,EAAA,EAAK+B,KAAN,eACMlD,KAAKF,MAAMiD,yBAA2B/C,KAAKZ,MAAM6D,aAAaf,MAAMW,OAD1E,MAfS,GAeT,UAIJ,eAAC1B,EAAA,EAAKC,MAAN,WACI,cAACD,EAAA,EAAKG,MAAN,+BAGA,cAACH,EAAA,EAAKI,QAAN,CACIC,GAAG,4BACHC,GAAG,WACHnB,KAAK,IACL6C,UA1BW,IA2BXxB,aAAc3B,KAAKZ,MAAM6D,aAAad,YACtCa,SAAUhD,KAAKwC,kBAEnB,eAACrB,EAAA,EAAK+B,KAAN,eACMlD,KAAKF,MAAMgD,kCAAoC9C,KAAKZ,MAAM6D,aAAad,YAAYU,OADzF,MA9Be,IA8Bf,iB,GAjE0B1D,GCCzBiE,E,kDAEnB,WAAYhE,GACX,IAAD,8BACE,cAAMA,IACDU,MAAQ,CACXR,WAAW,EACXS,UAAW,GACXsD,UAAW,GACXJ,aAAc,CACZf,MAAO,UACPC,YAAa,2JARnB,E,gEAcC,IAAD,OACEmB,MAAM,UACHC,MAAK,SAAAC,GACJ,OAAOA,EAAIC,UAEZF,MAAK,SAACF,GACL,EAAK9D,SAAS,CAAC8D,mB,wCAkBnB,OAXE,mCACGrD,KAAKF,MAAMuD,UAAUK,KAClB,SAAAC,GAAQ,OACN,cAAC,EAAD,CAEEzB,MAAOyB,EAASzB,MAChBC,YAAawB,EAASxB,aAFjBwB,EAASnC,W,+BAW3B,IAAD,OACE,OACE,sBAAKQ,UAAU,oFAAf,UACE,cAAC,EAAD,CACEiB,aAAcjD,KAAKF,MAAMmD,aACzBzD,KAAMQ,KAAKF,MAAMR,UACjBK,OACE,kBAAM,EAAKJ,SAAS,CAACD,WAAU,OAEnC,qBAAK0C,UAAU,8EAAf,SACE,sBAAKA,UAAU,kBAAkB4B,MAAO,CAACC,SAAS,KAAlD,UACE,mCAAM7D,KAAKF,MAAMmD,aAAaf,MAA9B,OACA,kCAAKlC,KAAKF,MAAMmD,aAAad,YAA7B,YAGJ,qBAAKH,UAAU,yBAAf,SACE,qBAAKA,UAAU,6DAA6D4B,MAAO,CAACC,SAAS,KAA7F,SACI7D,KAAK8D,sBAGX,sBAAK9B,UAAU,6CAAf,UACI,cAACzB,EAAA,EAAD,CAAQC,QAAQ,kBAAhB,0BAGA,cAACD,EAAA,EAAD,CAAQC,QAAQ,kBACdC,QACE,kBAAM,EAAKlB,SAAS,CAACD,WAAW,EAAMS,UAAW,wBAFrD,qC,GArEqBkB,aCMlB8C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,QCGdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f7698919.chunk.js","sourcesContent":["\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport React, { Component } from \"react\";\r\n\r\nclass ModalDialogBox extends Component \r\n{\r\n    constructor(props, dialogBoxName)\r\n    {\r\n        super(props);\r\n        this.state = {show: false || props.openModal, modalName: dialogBoxName};\r\n    }\r\n\r\n    openModal = () =>\r\n    {\r\n        this.setState({show:true});\r\n    }\r\n\r\n    resetState()\r\n    {\r\n        this.setState({show:false});\r\n    }\r\n    \r\n    closeModal = () =>\r\n    {\r\n        this.resetState();\r\n        this.props.onHide();\r\n    }\r\n\r\n    saveChanges = (data) =>\r\n    {\r\n        this.closeModal();\r\n    }\r\n\r\n    componentDidUpdate(prevProps)\r\n    {\r\n        const {show, modalName} = this.props;\r\n        if(prevProps.show !== show && prevProps.modalName === this.modalName)\r\n        {\r\n            if(show===true)\r\n            {\r\n                this.openModal();\r\n            }\r\n            else\r\n            {\r\n                this.closeModal();\r\n            }\r\n        }\r\n    }\r\n\r\n    renderHeader()\r\n    {\r\n        return (\r\n            <Modal.Title>\r\n                Insert Title Here\r\n            </Modal.Title>\r\n        );\r\n    }\r\n\r\n    renderBody()\r\n    {\r\n        return (\r\n            <form>\r\n                <div class=\"form-group\">\r\n                    <label> List Title </label>\r\n                    <input type=\"text\" class=\"form-control\"></input>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label> List Description </label>\r\n                    <textarea class=\"form-control\" rows=\"2\"></textarea>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    renderFooter()\r\n    {\r\n        return (\r\n            <>\r\n            <Button variant=\"outline-primary\"\r\n                onClick={this.saveChanges}>\r\n                    Save Changes\r\n            </Button>\r\n            <Button \r\n                    variant=\"outline-secondary\" \r\n                    onClick={this.closeModal}\r\n                >\r\n                    Cancel\r\n            </Button>\r\n            </>\r\n        );\r\n        \r\n    }\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <Modal\r\n                show={this.state.show}\r\n                onHide={this.closeModal} \r\n                centered\r\n            >\r\n                <Modal.Header>\r\n                    {this.renderHeader()}\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    {this.renderBody()}\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    {this.renderFooter()}\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ModalDialogBox;","import { Modal, Button, Form } from \"react-bootstrap\";\r\nimport React, { Component } from \"react\";\r\nimport ModalDialogBox from './ModalDialogBox';\r\n\r\nexport default class EditItem extends ModalDialogBox\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props,\"edit-item\");\r\n    }\r\n    \r\n    renderHeader()\r\n    {\r\n        return (\r\n            <>\r\n                <Modal.Title>\r\n                    Edit Item\r\n                </Modal.Title>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderBody()\r\n    {\r\n        return (\r\n            <>\r\n                <Form>\r\n                    <Form.Group controlId=\"listTitle\">\r\n                        <Form.Label>\r\n                            List Title\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                            id=\"item-title\"\r\n                            as=\"input\"\r\n                            maxlength=\"50\"\r\n                            defaultValue={this.props.itemTitle || ''}\r\n                        />\r\n                    </Form.Group>\r\n                    \r\n                    <Form.Group controlId=\"listDescription\">\r\n                        <Form.Label>\r\n                            List Description\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                            id=\"item-description\"\r\n                            as=\"textarea\"\r\n                            rows=\"3\"\r\n                            maxlength=\"150\"\r\n                            defaultValue={this.props.itemDescription || ''}\r\n                        />\r\n                    </Form.Group>\r\n                    \r\n                </Form>\r\n            </>\r\n        )\r\n    }\r\n}","import { faEdit, faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, {Component} from 'react';\r\nimport EditItem from './EditItem';\r\nimport './TodoItem.scss';\r\n\r\nexport default class TodoItem extends Component \r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state={\r\n            openEditModal: false,\r\n            itemTitle:'',\r\n            itemDescription:''\r\n        };\r\n    }\r\n\r\n    handleEdit(itemTitle,itemDescription)\r\n    {\r\n        this.setState({openEditModal:true,modalName:''})\r\n    }\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <>\r\n                <EditItem \r\n                    show={this.state.openEditModal}\r\n                    onHide={() =>\r\n                        {\r\n                            this.setState({openEditModal:false,modalName:'edit-item'});\r\n                        }\r\n                    }\r\n                    itemTitle={this.state.itemTitle}\r\n                    itemDescription={this.state.itemDescription}\r\n                />\r\n                <div className=\"row todo-item\">\r\n                    <div className=\"col-2 d-flex justify-content-center item-status\">\r\n                        <div className=\"custom-control custom-checkbox\">\r\n                            <input className=\"item-status-checkbox custom-control-input\" type=\"checkbox\" />\r\n                            <label class=\"custom-control-label\" for=\"customCheck1\">\r\n                                <span class=\"text-hide\">Invisible</span>\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-6 item-information\">\r\n                        <div className=\"row item-title\">\r\n                            {this.props.title || \"Test Title Here\"}\r\n                        </div>\r\n                        <div className=\"row item-details\">\r\n                            {this.props.description || \"Message here\"}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-4 item-operations d-flex justify-content-end\">\r\n                        <button \r\n                            type=\"button\" \r\n                            className=\"item-edit btn btn-outline-primary\"\r\n                            onClick={()=>{\r\n                                this.setState({\r\n                                    openEditModal:true,\r\n                                    itemTitle: this.props.title,\r\n                                    itemDescription: this.props.description\r\n                                })\r\n                            }}\r\n                        >\r\n                            <FontAwesomeIcon icon={faEdit} />\r\n                        </button>\r\n                        <button type=\"button\" className=\"item-delete btn btn-outline-primary\">\r\n                            <FontAwesomeIcon icon={faTrash} />\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}","\r\nimport { Modal, Button, Form } from \"react-bootstrap\";\r\nimport React, { Component } from \"react\";\r\nimport ModalDialogBox from './ModalDialogBox';\r\n\r\nexport default class EditListSettings extends ModalDialogBox \r\n{\r\n    constructor(props)\r\n    {\r\n        super(props, \"edit-list-settings\");\r\n    }\r\n\r\n    countCharacters = (event) => {\r\n        const charCount = event.target.value.length;\r\n        this.setState({[event.target.id + '_length']: charCount})\r\n    }\r\n\r\n    renderHeader()\r\n    {\r\n        return (\r\n            <>\r\n                <Modal.Title>\r\n                    Edit List Settings\r\n                </Modal.Title>\r\n            </>\r\n        );\r\n    }\r\n\r\n    resetState()\r\n    {\r\n        super.resetState();\r\n        this.setState({\r\n            list_description_textarea_length: 0,\r\n            list_title_input_length: 0\r\n        });\r\n    }\r\n\r\n    renderBody()\r\n    {\r\n        let maxTitleLength = 50;\r\n        let maxDescriptionLength = 150;\r\n        return (\r\n            <Form>\r\n                <Form.Group>\r\n                    <Form.Label> \r\n                        List Title\r\n                    </Form.Label>\r\n                    <Form.Control \r\n                        id=\"list_title_input\"\r\n                        as=\"input\" \r\n                        maxlength={maxTitleLength}\r\n                        onChange={this.countCharacters}\r\n                        defaultValue={this.props.listSettings.title}\r\n                    />\r\n                    <Form.Text>\r\n                        ({this.state.list_title_input_length || this.props.listSettings.title.length} / {maxTitleLength})\r\n                    </Form.Text>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Label> \r\n                        List Description\r\n                    </Form.Label>\r\n                    <Form.Control \r\n                        id=\"list_description_textarea\"\r\n                        as=\"textarea\"\r\n                        rows=\"3\"\r\n                        maxLength={maxDescriptionLength}\r\n                        defaultValue={this.props.listSettings.description}\r\n                        onChange={this.countCharacters}\r\n                    />\r\n                    <Form.Text>\r\n                        ({this.state.list_description_textarea_length || this.props.listSettings.description.length} / {maxDescriptionLength})\r\n                    </Form.Text>\r\n                </Form.Group>\r\n            </Form>\r\n        );\r\n    }\r\n}","import './App.scss';\nimport TodoItem from './components/TodoItem';\nimport EditListSettings from './components/EditListSettings';\nimport {Button} from 'react-bootstrap';\nimport { Component } from 'react';\n\nexport default class App extends Component\n{\n  constructor(props)\n  {\n    super(props);\n    this.state = {\n      openModal: false, \n      modalName: \"\",\n      listItems: [],\n      listSettings: {\n        title: 'My List',\n        description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed sollicitudin eget tortor vel aliquam. Curabitur velit lectus, sodales in massa tempor, co'\n      }\n    };\n  }\n\n  componentDidMount()\n  {\n    fetch('/items')\n      .then(res => {\n        return res.json()\n      })\n      .then((listItems) => {\n        this.setState({listItems});\n      })\n  }\n\n  renderListItems()\n  {\n    const item = (\n      <>\n        {this.state.listItems.map(\n            listItem => (\n              <TodoItem \n                key={listItem.id}\n                title={listItem.title}\n                description={listItem.description}\n              />\n        ))}\n      </>\n    );\n    return item;\n  }\n\n  render()\n  {\n    return (\n      <div className=\"container-fluid d-flex flex-column justify-content-center h-100 overflow-auto App\">\n        <EditListSettings \n          listSettings={this.state.listSettings}\n          show={this.state.openModal} \n          onHide={ \n            () => this.setState({openModal:false})\n          }/>\n        <div className=\"row d-flex flex-column align-items-center justify-content-center list-title\">\n          <div className=\"container-fluid\" style={{maxWidth:750}}>\n            <h1> {this.state.listSettings.title} </h1>\n            <p> {this.state.listSettings.description} </p>\n          </div>\n        </div>\n        <div className=\"row list-contents h-50\">\n          <div className=\"container-fluid justify-content-center h-100 overflow-auto\" style={{maxWidth:750}}>\n            { this.renderListItems() }\n          </div>\n        </div>\n        <div className=\"row justify-content-center list-operations\">\n            <Button variant=\"outline-primary\">\n              Add New Item\n            </Button>\n            <Button variant=\"outline-primary\"\n              onClick={\n                () => this.setState({openModal: true, modalName: \"edit-list-settings\"})\n              }>\n              List Settings\n            </Button>\n        </div>\n      </div>\n    );\n  }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/js/bootstrap.js';\nimport 'react-bootstrap';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}